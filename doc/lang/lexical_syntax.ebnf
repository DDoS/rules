(* This language uses only a subset of ASCII for it's source *)
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
    | "H" | "I" | "J" | "K" | "L" | "M" | "N"
    | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
    | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
    | "c" | "d" | "e" | "f" | "g" | "h" | "i"
    | "j" | "k" | "l" | "m" | "n" | "o" | "p"
    | "q" | "r" | "s" | "t" | "u" | "v" | "w"
    | "x" | "y" | "z" ;

binaryDigit = "0" | "1" ;
decimalDigit = "binaryDigit | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
hexDigit = decimalDigit | "a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" | "e"
    | "E" | "f" | "F" ;

symbol = "!" | "@" | "%" | "?" | "&" | "*" | "(" | ")" | "-" | "=" | "+"
    | "/" | "^" | ":" | "<" | ">" | "[" | "]" | "{" | "}" | "." | "," | "~"
    | "<<" | ">>" | ">>>" | "===", "!==", "==" | "!=" | "<=" | ">=" | "::"
    | "!:" | "<:" | ">:" | "<<:" | ">>:" | "<:>" | "&&" | "^^" | "||" | "**="
    | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^="
    | "|=" | "&&=" | "^^=" | "||=" | "~=" ;

keyword = "rule" | "when" | "with" | "then" | "match" | "if"
    | "else" | "for" | "for_rev" | "while" | "do" | "try"
    | "catch" | "finally" | "let" | "var" | "class" | "void"
    | "break" | "continue" | "throw" | "static" | "import"
    | "package" | "new" | "throws" | "public" | "return"
    | "this" | "super" ;

(* Excludes the backslash so we can use it for escape sequences *)
printChar = ?all ASCII print characters? ;

newLineChar = ?LF? | ?CR? ;
newLine = newLineChar | (?CR?, ?LF?);

lineWsChar = " " | ?TAB?;

wsChar = lineWsChar | newLineChar ;

lineComment = "#", {printChar | lineWsChar} ;
(* Count of "#" as prefix and suffix needs to be the same
    This allows comment nesting *)
blockComment = "##", {"#"}, {printChar | wsChar}, "##", {"#"} ;
(* TODO: expect a new line after a block comment? *)

(* Comments, line white space and escaped new lines are ignored by the lexer *)
ignored = lineWsChar | lineComment | blockComment
    | ("\", newLineChar, {newLineChar}) ;

(* Identifiers don't start with a decimal digit, but can contain one *)
identifierStart = "_" | letter ;
identifierBody = identifierStart | decimalDigit ;

sign = "-" | "+" ;

(* We allow underscores between digits to group numbers: 1_000_000 *)
binaryDigitSequence = binaryDigit, {{"_"}, binaryDigit} ;
decimalDigitSequence = decimalDigit, {{"_"}, decimalDigit} ;
hexDigitSequence = hexDigit, {{"_"}, hexDigit} ;

(* Integers are like: 1234, 2_000, 0xab2, 0b1101 *)
binaryInteger = "0", ("b" | "B"), binaryDigitSequence ;
decimalInteger = decimalDigitSequence ;
hexInteger = "0", ("x" | "X"), hexDigitSequence ;

exponentPart = ("e" | "E"), [sign], decimalDigitSequence ;
(* Float numbers are like: 0.4, 1.28, .5, .3e2, 2., 1.e2, 3.4e12, 5_0e-9 *)
float = ([decimalDigitSequence], ".", decimalDigitSequence, [exponentPart])
    | (decimalDigitSequence, ".", [decimalDigitSequence], [exponentPart])
    | (decimalDigitSequence, exponentPart) ;

boolean = "true" | "false" ;

(* bell, backspace, horizontal tab, line feed, vertical tab, form feed,
    carriage return, double quote and backslash *)
charEscape = "\a" | "\b" | "\t" | "\n" | "\v" | "\f" | "\r" | '\"' | "\\" ;
(* Hexadecimal sequence to be converted to  unicode code point in the string *)
unicodeEscape = "\u", hexDigit, {hexDigit} ;
(* String are any ASCII char, excluding double quotes and new line chars,
    but with escape sequences *)
string = '"', {
    (printChar - '"' - "\") | lineWsChar | charEscape | unicodeEscape
}, '"' ;

(* These are the tokens used by the abstract syntax *)

identifierToken = identifierStart, {identifierBody} ;
literalToken = (
    decimalInteger | hexInteger | binaryInteger | float | boolean | string
) ;
symbolToken = symbol ;
keywordToken = keyword ;
terminatorToken = ';' ;
indentationToken = lineWsChar, {lineWsChar} ;

(* The final output from the lexer *)
tokenList = [indentationToken], {ignored}, {
    (identifierToken | literalToken | symbolToken | keywordToken
    | terminatorToken | (newLine, [indentationToken])), {ignored}
} ;
