(* Names are just "." separated list of identifiers. They represent packages,
    class names, fields and/or variables. These need to be disambiguated
    later. *)
name = identifierToken, {".", identifierToken} ;

(* Array notation is like D and reversed compared to Java.
    int[1][2] is an array of 2 arrays of 1 integer.
    We can also have unsized arrays which, like int[][2],
    which means an array of 2 integer arrays. *)
arrayUnsized = "[", "]" ;
arraySized = "[", expression, "]" ;
arrayDimension = arrayUnsized | arraySized ;

(* Named types are names with optional array dimensions *)
namedType = name, {arrayDimension} ;

(* Any type is only {} *)
anyType = "{", "}" ;

(* Tuple type is like {uint8, bool[]} *)
tupleType = "{", type, {type}, "}" ;

(* Struct type is like {uint32 x, uint32 y} *)
structType = "{", (type, identifier), {type, identifier}, "}" ;

compositeType = anyType | tupleType | structType ;

type = namedType | compositeType ;
