(*
    Here are some examples of value initialization

    # Initialization from a literal, nothing special
    int i = 4;
    # Constructors don't exist outside of ordinary functions
    # Initialization is done using curly braces, and is always on the heap
    Vec3 v = Vec3{i, 1, 2};

    # In an assignment expression, we can omit the class name in the initializer
    # This results in the variable type being used instead
    Vec3 u = {i, 1, 2};

    # We can also nest initializations, which works like assignment of the fields
    Transform s = {{0, 3, 2}, {0, 0, 0, 1}, {1, 1, 2}};
    # It's also possible to use labels so we can reorder (but can't partially label)
    Transform t = {scale: {1, 1, 2}, rot: {0, 0, 0, 1}, pos: {x: 1, y: 1, z: 2}};

    # Initializers work basically the same for arrays
    int[] a = {1, 2, 3, 5};
    int[][] b = {{1}, {}};
    # Index labeling is allowed
    bool[] a = {2: true, other: false};

    # To distinguish between array initialization and indexing operations
    # we must always include the curly braces.
    # Missing elements use the default value for the type.
    Vec3[4] {} == {0, 0, 0, 0}
    Vec3[2] {3, 1} == {3, 1}
    Vec3[1][2] {{2}, {}} == {{2}, {0}}
    Vec3[][2] {a} == {{1, 2, 3, 5}, null}

    # When no sizes are given for arrays, the initializer size is used
    Vec3[] {1, 2, 3}.len() == 3
*)

(* Assignment aren't expressions in this language *)
referenceExpression = name | fieldAccess | indexAccess ;
assignment = referenceExpression, assignmentOperator, expression ;

(* Used to give names to types, example: def Vec2d: {fp64 x, fp64 y} *)
typeDef = "def", identifier, ":", type ;

indentation = indentationToken, {indentationToken} ;

statement = assignment | functionCall ;

statements = {indentation, (EOF | (statement, (indentation | ";" | EOF)))} ;
